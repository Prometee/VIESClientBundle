name: Build

on:
  push:
    branches-ignore:
      - 'dependabot/**'
    paths-ignore:
      - "docs/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  release:
    types: [created]
  schedule:
    -
      cron: "0 1 * * 6" # Run at 1am every Saturday
  workflow_dispatch: ~

jobs:
  tests:
    runs-on: ubuntu-latest

    name: "PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}"

    strategy:
      fail-fast: false
      matrix:
        php: [7.2, 7.3, 7.4, 8.0, 8.1]
        symfony: [^4.4, ^5.4, ^6.0]
        exclude:
          - php: 7.2
            symfony: ^6.0
          - php: 7.3
            symfony: ^6.0
          - php: 7.4
            symfony: ^6.0

    env:
      APP_ENV: test

    steps:
      -
        uses: actions/checkout@v2

      -
        name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "${{ matrix.php }}"
          extensions: intl
          tools: symfony
          coverage: none

      -
        name: Output PHP version for Symfony CLI
        run: php -v | head -n 1 | awk '{ print $2 }' > .php-version

      -
        name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      -
        name: Cache Composer
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-
      -
        name: Restrict Symfony version
        if: matrix.symfony != ''
        run: |
          composer global config --no-plugins allow-plugins.symfony/flex true
          composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.10"
          composer config extra.symfony.require "${{ matrix.symfony }}"
      -
        name: Install PHP dependencies
        run: composer install --no-interaction
        id: end-of-setup

      -
        name: Check Composer
        run: composer validate --strict
        if: always() && steps.end-of-setup.outcome == 'success'

      -
        name: Run analysis - ECS
        run: vendor/bin/ecs check .
        if: always() && steps.end-of-setup.outcome == 'success'

      -
        name: Run analysis - PHPStan
        run: vendor/bin/phpstan.phar analyse -c phpstan.neon.dist -l max src Tests
        if: always() && steps.end-of-setup.outcome == 'success'

      -
        name: Run analysis - PSALM
        run: vendor/bin/psalm
        if: always() && steps.end-of-setup.outcome == 'success'

      -
        name: Run PHPUnit
        run: vendor/bin/phpunit --colors=always
        if: always() && steps.end-of-setup.outcome == 'success'
